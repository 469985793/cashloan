{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport Promise from 'bluebird';\nimport toLooksLikeDirectory from './toLooksLikeDirectory';\nimport writeFileToAssets from './writeFileToAssets';\nimport writeDirectoryToAssets from './writeDirectoryToAssets';\nimport shouldIgnore from './shouldIgnore';\n\n/* eslint-disable import/no-commonjs */\nconst globAsync = Promise.promisify(require('glob'));\nconst fs = Promise.promisifyAll(require('fs-extra'));\n/* eslint-enable */\n\nconst union = (set1, set2) => {\n    return new Set([...set1, ...set2]);\n};\n\nconst isDevServer = (compiler) => {\n    return compiler.outputFileSystem.constructor.name === 'MemoryFileSystem';\n};\n\nconst getOutputDir = (compiler) => {\n    if (compiler.options.output.path && compiler.options.output.path !== '/') {\n        return compiler.options.output.path;\n    }\n\n    const devServer = compiler.options.devServer;\n\n    if (!devServer || !devServer.outputPath || devServer.outputPath === '/') {\n        throw new Error('CopyWebpackPlugin: to use webpack-dev-server, devServer.outputPath must be defined in the webpack config');\n    }\n\n    return devServer.outputPath;\n};\n\nexport default (patterns = [], options = {}) => {\n    if (!_.isArray(patterns)) {\n        throw new Error('CopyWebpackPlugin: patterns must be an array');\n    }\n\n    const apply = (compiler) => {\n        const webpackContext = compiler.options.context;\n        const outputPath = getOutputDir(compiler);\n        const fileDependencies = [];\n        const contextDependencies = [];\n        const webpackIgnore = options.ignore || [];\n        const copyUnmodified = options.copyUnmodified;\n        let writtenAssets;\n        let lastGlobalUpdate;\n\n        lastGlobalUpdate = 0;\n\n        compiler.plugin('emit', (compilation, cb) => {\n            writtenAssets = new Set();\n\n            Promise.each(patterns, (pattern) => {\n                let relDest;\n                let globOpts;\n\n                if (pattern.context && !path.isAbsolute(pattern.context)) {\n                    pattern.context = path.resolve(webpackContext, pattern.context);\n                }\n\n                const context = pattern.context || webpackContext;\n                const ignoreList = webpackIgnore.concat(pattern.ignore || []);\n\n                globOpts = {\n                    cwd: context\n                };\n\n                // From can be an object\n                if (pattern.from.glob) {\n                    globOpts = _.assignIn(globOpts, _.omit(pattern.from, 'glob'));\n                    pattern.from = pattern.from.glob;\n                }\n\n                const relSrc = pattern.from;\n                const absSrc = path.resolve(context, relSrc);\n\n                relDest = pattern.to || '';\n\n                const forceWrite = Boolean(pattern.force);\n\n                return fs\n                    .statAsync(absSrc)\n                    .catch(() => {\n                        return null;\n                    })\n                    .then((stat) => {\n                        if (stat && stat.isDirectory()) {\n                            contextDependencies.push(absSrc);\n\n                            // Make the relative destination actually relative\n                            if (path.isAbsolute(relDest)) {\n                                relDest = path.relative(outputPath, relDest);\n                            }\n\n                            return writeDirectoryToAssets({\n                                absDirSrc: absSrc,\n                                compilation,\n                                copyUnmodified,\n                                flatten: pattern.flatten,\n                                forceWrite,\n                                ignoreList,\n                                lastGlobalUpdate,\n                                relDirDest: relDest\n                            })\n                            .then((assets) => {\n                                writtenAssets = union(writtenAssets, assets);\n                            });\n                        }\n\n                        return globAsync(relSrc, globOpts)\n                            .each((relFileSrcParam) => {\n                                let relFileDest;\n                                let relFileSrc;\n\n                                relFileSrc = relFileSrcParam;\n\n                                // Skip if it matches any of our ignore list\n                                if (shouldIgnore(relFileSrc, ignoreList)) {\n                                    return false;\n                                }\n\n                                const absFileSrc = path.resolve(context, relFileSrc);\n\n                                relFileDest = pattern.to || '';\n\n                                // Remove any directory references if flattening\n                                if (pattern.flatten) {\n                                    relFileSrc = path.basename(relFileSrc);\n                                }\n\n                                const relFileDirname = path.dirname(relFileSrc);\n\n                                fileDependencies.push(absFileSrc);\n\n                                // If the pattern is a blob\n                                if (!stat) {\n                                    // If the source is absolute\n                                    if (path.isAbsolute(relFileSrc)) {\n                                        // Make the destination relative\n                                        relFileDest = path.join(path.relative(context, relFileDirname), path.basename(relFileSrc));\n\n                                    // If the source is relative\n                                    } else {\n                                        relFileDest = path.join(relFileDest, relFileSrc);\n                                    }\n\n                                // If it looks like a directory\n                                } else if (toLooksLikeDirectory(pattern)) {\n                                    // Make the path relative to the source\n                                    relFileDest = path.join(relFileDest, path.basename(relFileSrc));\n                                }\n\n                                // If there's still no relFileDest\n                                relFileDest = relFileDest || path.basename(relFileSrc);\n\n                                // Make sure the relative destination is actually relative\n                                if (path.isAbsolute(relFileDest)) {\n                                    relFileDest = path.relative(outputPath, relFileDest);\n                                }\n\n                                return writeFileToAssets({\n                                    absFileSrc,\n                                    compilation,\n                                    copyUnmodified,\n                                    forceWrite,\n                                    lastGlobalUpdate,\n                                    relFileDest\n                                })\n                                .then((asset) => {\n                                    writtenAssets.add(asset);\n                                });\n                            });\n                    });\n            })\n            .then(() => {\n                lastGlobalUpdate = _.now();\n            })\n            .catch((err) => {\n                compilation.errors.push(err);\n            })\n            .finally(cb);\n        });\n\n        compiler.plugin('after-emit', (compilation, callback) => {\n            const trackedFiles = compilation.fileDependencies;\n\n            _.forEach(fileDependencies, (file) => {\n                if (!_.includes(trackedFiles, file)) {\n                    trackedFiles.push(file);\n                }\n            });\n\n            const trackedDirs = compilation.contextDependencies;\n\n            _.forEach(contextDependencies, (context) => {\n                if (!_.includes(trackedDirs, context)) {\n                    trackedDirs.push(context);\n                }\n            });\n\n            // Write files to file system if webpack-dev-server\n\n            if (!isDevServer(compiler)) {\n                callback();\n\n                return;\n            }\n\n            const writeFilePromises = [];\n\n            _.forEach(compilation.assets, (asset, assetPath) => {\n                // If this is not our asset, ignore it\n                if (!writtenAssets.has(assetPath)) {\n                    return;\n                }\n\n                const outputFilePath = path.join(outputPath, assetPath);\n                const absOutputPath = path.resolve(process.cwd(), outputFilePath);\n\n                writeFilePromises.push(fs.mkdirsAsync(path.dirname(absOutputPath))\n                    .then(() => {\n                        return fs.writeFileAsync(absOutputPath, asset.source());\n                    }));\n            });\n\n            Promise.all(writeFilePromises)\n                .then(() => {\n                    callback();\n                });\n        });\n    };\n\n    return {\n        apply\n    };\n};\n"],"sourceRoot":"/source/"}